col = as.factor(metadata$condition),
pch = 19,
xlab = "PC1",
ylab = "PC2",
main = "PCA of Samples_before_batch_creation")
legend("topright", legend = levels(as.factor(metadata$condition)),
col = 1:2, pch = 19)
# Load the GEOquery package
if (!requireNamespace("GEOquery", quietly = TRUE)) {
BiocManager::install("GEOquery")
}
library(GEOquery)
# Fetch the GEO dataset
gse <- getGEO("GSE270045", GSEMatrix = TRUE)
# Extract the phenotype data
pheno_data <- pData(phenoData(gse[[1]]))
# View the first few rows of the phenotype data to identify relevant columns
head(pheno_data)
head(pheno_data[,1:5])   # preview first 5 columns
#batch
batch <- rep(1, ncol(expr_log))
# Preserve condition effect in the model
mod <- model.matrix(~ condition, data = metadata)
expr_corrected <- ComBat(dat = as.matrix(expr_log), batch = batch, mod = mod)
# PCA after correction
pca_after <- prcomp(t(expr_corrected), scale. = TRUE)
if (!requireNamespace("sva", quietly = TRUE)) {
BiocManager::install("sva")
}
library(sva)
batch <- rep(1, ncol(expr_log))
#batch
batch <- rep(1, ncol(expr_log))
# Preserve condition effect in the model
mod <- model.matrix(~ condition, data = metadata)
expr_corrected <- ComBat(dat = as.matrix(expr_log), batch = batch, mod = mod)
colnames(pheno_data)
# Preserve condition effect in the model
metadata$condition <- factor(metadata$condition, levels = c("Control", "Long_COVID")) #new Line Add here
mod <- model.matrix(~ condition, data = metadata)
expr_corrected <- ComBat(dat = as.matrix(expr_log), batch = batch, mod = mod)
# Check instrument model (sequencing platform)
table(pheno_data$instrument_model)
# Check source_name_ch1 (might have sample collection/run info)
head(pheno_data$source_name_ch1, 20)
# Check characteristics columns (often hold condition, sex, age, or batch/run info)
head(pheno_data$characteristics_ch1, 10)
head(pheno_data$characteristics_ch1.1, 10)
head(pheno_data$characteristics_ch1.2, 10)
# PCA after correction
pca_after <- prcomp(t(expr_corrected), scale. = TRUE)
#batch
batch <- rep(1, ncol(expr_log))
# Preserve condition effect in the model
# Force condition factor
metadata$condition <- factor(metadata$condition, levels = c("Control", "Long_COVID"))
# Dummy batch (all 1s)
batch <- rep(1, ncol(expr_log))
# Model matrix
mod <- model.matrix(~ condition, data = metadata)
# Run ComBat (will just return same matrix because batch has 1 level)
expr_corrected <- ComBat(dat = as.matrix(expr_log), batch = batch, mod = mod, par.prior=TRUE, prior.plots=FALSE)
# Dummy batch (all 1s)
batch <- rep(1, ncol(expr_log))
# Model matrix
mod <- model.matrix(~ condition, data = metadata)
# Run ComBat (will just return same matrix because batch has 1 level)
expr_corrected <- ComBat(dat = as.matrix(expr_log), batch = batch, mod = mod, par.prior=TRUE, prior.plots=FALSE)
# PCA after correction (same as before)
pca_after <- prcomp(t(expr_corrected), scale. = TRUE)
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
# Re-create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered), # must be integers
colData = metadata,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered), # must be integers
colData = metadata,
design = ~ condition)
# Run DESeq2
dds <- DESeq(dds)
# Order by adjusted p-value
res <- res[order(res$padj), ]
library(DESeq2)
library(EnhancedVolcano)
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
# Re-create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered), # must be integers
colData = metadata,
design = ~ condition)
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
library(DESeq2)
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
library(DESeq2)
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
library(DESeq2)
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
library(DESeq2)
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
library(DESeq2)
# 1️⃣ Create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered),
colData = metadata,
design = ~ condition)
# 2️⃣ Run DESeq to fit the model
dds <- DESeq(dds)
# 3️⃣ Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
# 4️⃣ Order by adjusted p-value
res <- res[order(res$padj), ]
# 3️⃣ Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
# 4️⃣ Order by adjusted p-value
res <- res[order(res$padj), ]
# 1️⃣ Create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered),
colData = metadata,
design = ~ condition)
# 2️⃣ Run DESeq to fit the model
dds <- DESeq(dds)
# 3️⃣ Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
# 4️⃣ Order by adjusted p-value
res <- res[order(res$padj), ]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
# Re-create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered), # must be integers
colData = metadata,
design = ~ condition)
# Run DESeq2
dds <- DESeq(dds)
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
res <- lfcShrink(dds, contrast = c("condition", "Long_COVID", "Control"),
res = res, type = "ashr")   # shrink fold-changes
install.packages("ashr")
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
res <- lfcShrink(dds, contrast = c("condition", "Long_COVID", "Control"),
res = res, type = "ashr")   # shrink fold-changes
library(ashr)
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
res <- lfcShrink(dds, contrast = c("condition", "Long_COVID", "Control"),
res = res, type = "ashr")   # shrink fold-changes
res <- res[order(res$padj), ]
head(res)
library(EnhancedVolcano)
# Volcano plot
# -----------------------------
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0.001,
FCcutoff = 2,
title = "Volcano Plot of DEGs")
topgenes <- rownames(res)[1:20]
mat <- assay(vst(dds))[topgenes, ]   # variance stabilized counts
pheatmap(mat, annotation_col = metadata, show_rownames = TRUE,
main = "Top 20 Differentially Expressed Genes")
# Heatmap (Top 20 DEGs)
# -----------------------------
topgenes <- rownames(res)[1:20]
mat <- assay(vst(dds))[topgenes, ]   # variance stabilized counts
pheatmap(mat, annotation_col = metadata, show_rownames = TRUE,
main = "Top 20 Different Expressed Genes Heatmap")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0.001,
FCcutoff = 2,
title = "Volcano_Plot of DEG's")
write.csv(as.data.frame(res), file = "DEGs_full.csv")
# Top 15 up-regulated
top_up <- head(res[order(res$log2FoldChange, decreasing = TRUE), ], 15)
write.csv(as.data.frame(top_up), file = "Top15_Upregulated.csv")
top_up <- head(res[order(res$log2FoldChange, decreasing = TRUE), ], 15)
write.csv(as.data.frame(top_up), file = "Top15_Upregulated.csv")
top_down <- head(res[order(res$log2FoldChange, decreasing = FALSE), ], 15)
write.csv(as.data.frame(top_down), file = "Top15_Downregulated.csv")
write.csv(as.data.frame(top_up), file = "Top15_Upregulated.csv")
write.csv(as.data.frame(top_up), file = "Top15_Upregulated.csv")
# Convert DESeqResults to data frame and remove NAs
res_df <- as.data.frame(res)
res_df <- res_df[!is.na(res_df$padj), ]
# Top 15 up-regulated
top_up <- head(res_df[order(res_df$log2FoldChange, decreasing = TRUE), ], 15)
write.csv(top_up, file = "Top15_Upregulated.csv", row.names = TRUE)
# Top 15 down-regulated
top_down <- head(res_df[order(res_df$log2FoldChange, decreasing = FALSE), ], 15)
write.csv(top_down, file = "Top15_Downregulated.csv", row.names = TRUE)
getwd()
setwd("C:/Users/DELL/Desktop/Gene Expression Biomarkers/Project_New")
write.csv(top_down, file = "Top15_Downregulated.csv", row.names = TRUE)
file.exists("Top15_Downregulated.csv")
getwd()
setwd("C:/Users/DELL/Desktop/Gene Expression Biomarkers/Project_New")
write.csv(top_down, file = "Top15_Down regulated.csv", row.names = TRUE)
write.csv(top_up, file = "Top15_Up regulated.csv", row.names = TRUE)
file.exists("Top15_Up regulated.csv")
file.exists("Top15_Down regulated.csv")
library(DESeq2)
# Re-create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = round(expr_filtered), # must be integers
colData = metadata,
design = ~ condition)
# Run DESeq2
dds <- DESeq(dds)
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
res <- lfcShrink(dds, contrast = c("condition", "Long_COVID", "Control"),
res = res, type = "ashr")   # shrink fold-changes
library(ashr)
# Extract results (Long_COVID vs Control)
res <- results(dds, contrast = c("condition", "Long_COVID", "Control"))
res <- lfcShrink(dds, contrast = c("condition", "Long_COVID", "Control"),
res = res, type = "ashr")   # shrink fold-changes
# Order by adjusted p-value
res <- res[order(res$padj), ]
head(res)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 0.001,
FCcutoff = 2,
title = "Volcano_Plot of DEG's")
# Heatmap (Top 20 DEGs)
library(pheatmap)
topgenes <- rownames(res)[1:20]
mat <- assay(vst(dds))[topgenes, ]   # variance stabilized counts
pheatmap(mat, annotation_col = metadata, show_rownames = TRUE,
main = "Top 20 Different Expressed Genes Heatmap")
# Check characteristics columns (often hold condition, sex, age, or batch/run info)
head(pheno_data$characteristics_ch1, 10)
head(pheno_data$characteristics_ch1.1, 10)
head(pheno_data$characteristics_ch1.2, 10)
# Significant DEGs (padj < 0.05 and |log2FC| > 1)
sig_DEGs <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
write.csv(as.data.frame(sig_DEGs), "Significant_DEGs.csv")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
ggtitle("DEGs Hub Genes log2FC")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="blue") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="blue") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
ggtitle("DEGs Hub Genes log2FC")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="orange") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
ggtitle("DEGs Hub Genes log2FC")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="green") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
ggtitle("DEGs Hub Genes log2FC")
# Read hub genes exported from Cytoscape (if saved as CSV)
hub_genes <- c("LHX5","IGF2","SLC22A18AS","C16orf71",
"PBX4","PKNOX2","FEZF2","RELN","MEIS2","PBX2")
# Subset your DESeq2 results for these hub genes
hub_res <- res_df[rownames(res_df) %in% hub_genes, ]
# Check the table
hub_res
# Plot log2 fold change
library(ggplot2)
ggplot(hub_res, aes(x=reorder(rownames(hub_res), log2FoldChange),
y=log2FoldChange)) +
geom_bar(stat="identity", fill="green") +
coord_flip() +
xlab("Hub Genes") +
ylab("log2 Fold Change") +
ggtitle("DEGs Hub Genes log2FC")
# Install required packages if not already
if (!requireNamespace("clusterProfiler", quietly = TRUE)) {
BiocManager::install("clusterProfiler")
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE)) {
BiocManager::install("org.Hs.eg.db")
}
if (!requireNamespace("ReactomePA", quietly = TRUE)) {
BiocManager::install("ReactomePA")
}
library(clusterProfiler)
library(org.Hs.eg.db)
library(ReactomePA)
library(enrichplot)
sig_genes <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
# Convert gene symbols to Entrez IDs (needed for enrichment)
gene_symbols <- rownames(sig_genes)
entrez_ids <- mapIds(org.Hs.eg.db,
keys = gene_symbols,
column = "ENTREZID",
keytype = "SYMBOL",
multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# KEGG Pathway Enrichment
# -----------------------------
ekegg <- enrichKEGG(gene = entrez_ids,
organism = "hsa",
pvalueCutoff = 0.05)
# Plot KEGG pathways
dotplot(ekegg, showCategory = 10, title = "KEGG Pathways")
# KEGG Pathway Enrichment
# -----------------------------
ekegg <- enrichKEGG(gene = entrez_ids,
organism = "hsa",
pvalueCutoff = 0.05)
# Plot KEGG pathways
dotplot(ekegg, showCategory = 10, title = "KEGG Pathways")
# Gene Ontology (GO) Enrichment
# -----------------------------
ego <- enrichGO(gene = entrez_ids,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",   # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
barplot(ego, showCategory = 10, title = "GO Biological Process")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("clusterProfiler", "org.Hs.eg.db", "ReactomePA"))
library(clusterProfiler)
library(org.Hs.eg.db)
library(ReactomePA)
library(ggplot2)
# Convert gene symbols → Entrez IDs
sig_gene_symbols <- rownames(sig_DEGs)
sig_gene_entrez <- bitr(sig_gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# ⚡ GO Enrichment
ego_all <- enrichGO(gene          = sig_gene_entrez$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = "ALL",   # BP, MF, CC, ALL
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
# ⚡ GO Enrichment
ego_all <- enrichGO(gene          = sig_gene_entrez$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = "ALL",   # BP, MF, CC, ALL
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
dotplot(ego_all, split="ONTOLOGY") + facet_grid(ONTOLOGY~., scale="free") +
ggtitle("GO Enrichment (All DEGs)")
dotplot(ego_all, split="ONTOLOGY") + facet_grid(ONTOLOGY~., scale="free") +
ggtitle(" Gene Ontology Enrichment (All DEGs)")
ekegg_all <- enrichKEGG(gene= sig_gene_entrez$ENTREZID, organism= 'hsa', pvalueCutoff  = 0.05)
barplot(ekegg_all, showCategory=20, title="KEGG Pathways (All DEGs)")
ereact_all <- enrichPathway(gene         = sig_gene_entrez$ENTREZID,
organism     = "human",
pvalueCutoff = 0.05,
readable     = TRUE)
dotplot(ereact_all, showCategory=20, title="Reactome Pathways (All DEGs)")
ekegg_all <- enrichKEGG(
gene          = sig_gene_entrez$ENTREZID,
organism      = "hsa",
pvalueCutoff  = 0.1,   # relaxed cutoff
qvalueCutoff  = 0.2
)
if (nrow(as.data.frame(ekegg_all)) > 0) {
barplot(ekegg_all, showCategory=20, title="KEGG Pathways (All DEGs)")
dotplot(ekegg_all, showCategory=20, title="KEGG Pathways (All DEGs)")
write.csv(as.data.frame(head(ekegg_all, 10)),
"KEGG_Top10.csv", row.names = FALSE)
} else {
message("⚠ No KEGG enrichment found.")
}
ereact_all <- enrichPathway(
gene          = sig_gene_entrez$ENTREZID,
organism      = "human",
pvalueCutoff  = 0.1,
readable      = TRUE
)
if (nrow(as.data.frame(ereact_all)) > 0) {
dotplot(ereact_all, showCategory=20, title="Reactome Pathways (All DEGs)")
barplot(ereact_all, showCategory=20, title="Reactome Pathways (All DEGs)")
write.csv(as.data.frame(head(ereact_all, 10)),
"Reactome_Top10.csv", row.names = FALSE)
} else {
message("⚠ No Reactome enrichment found.")
}
# Save results
write.csv(as.data.frame(ego_all), "GO_All_DEGs.csv")
write.csv(as.data.frame(ekegg_all), "KEGG_All_DEGs.csv")
hub_gene_entrez <- bitr(hub_genes,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# ⚡ GO Enrichment
ego_hub <- enrichGO(gene          = hub_gene_entrez$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = "ALL",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
dotplot(ego_hub, split="ONTOLOGY") + facet_grid(ONTOLOGY~., scale="free") +
ggtitle("GO Enrichment (Hub Genes)")
dotplot(ego_hub, split="ONTOLOGY") + facet_grid(ONTOLOGY~., scale="free") +
ggtitle("Gene Ontology Enrichment (Hub Genes)")
ekegg_hub <- enrichKEGG(gene          = hub_gene_entrez$ENTREZID,
organism      = 'hsa',
pvalueCutoff  = 0.05)
barplot(ekegg_hub, showCategory=15, title="KEGG Pathways (Hub Genes)")
ereact_hub <- enrichPathway(gene         = hub_gene_entrez$ENTREZID,
organism     = "human",
pvalueCutoff = 0.05,
readable     = TRUE)
dotplot(ereact_hub, showCategory=15, title="Reactome Pathways (Hub Genes)")
write.csv(as.data.frame(ego_hub), "GO_HubGenes.csv")
write.csv(as.data.frame(ego_hub), "Gene_Ontology _HubGenes.csv")
write.csv(as.data.frame(ekegg_hub), "KEGG_HubGenes.csv")
write.csv(as.data.frame(ereact_hub), "Reactome_HubGenes.csv")
---
title: "Identification of Gene Expression Biomarkers in COVID-19 Patients Using Transcriptomic Analysis"
top_up <- head(res_df[order(res_df$log2FoldChange, decreasing = TRUE), ], 15)
write.csv(top_up, file = "Top15_Up regulated.csv", row.names = TRUE)
